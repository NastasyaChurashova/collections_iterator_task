// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = [
	{
		title: "Living on the edge",
		artist: "Aerosmith",
		year: "1984",
	},
	{
		title: "Monkey",
		artist: "Louis Hay",
		year: "2010",
	},
	{
		title: "Heaven",
		artist: "Bryan Adams",
		year: "1995",
	},
];

console.log(musicCollection);

musicCollection[Symbol.iterator] = function () {
	return {
		current: 0,
		to: this.length,
		next() {
			return this.current < this.to ? { done: false, value: musicCollection[this.current++] } : { done: true };
		},
	};
};

for (let album of musicCollection) {
	console.log(`${album.title} - ${album.artist} (${album.year})`);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

let chefs = new Map([
	["Виктор", "специализация: Пицца"],
	["Ольга", "специализация: Суши"],
	["Дмитрий", "специализация: Десерты"],
]);

const dishes = new Map([
	["Пицца 'Маргарита'", "Виктор"],
	["Пицца 'Пепперони'", "Виктор"],
	["Суши 'Филадельфия'", "Ольга"],
	["Суши 'Калифорния'", "Ольга"],
	["Тирамису", "Дмитрий"],
	["Чизкейк", "Дмитрий"],
]);

const alexey = { name: "Алексей" };
const maria = { name: "Мария" };
const irina = { name: "Ирина" };

const orders = new Map([
	[alexey, ["Пицца 'Пепперони'", "Тирамису"]],
	[maria, ["Суши 'Калифорния'", "Пицца 'Маргарита'"]],
	[irina, ["Чизкейк"]],
]);

console.log(chefs, dishes, orders);

// • Отслеживать, какой повар готовит какое блюдо + заказы клиента

function printOrderInfo(orders) {
    const chefDishes = new Map();
	for (const [client, clientOrders] of orders) {
		console.log(`Заказы клиента ${client.name}:`);

		clientOrders.forEach((dish) => {
			const chef = dishes.get(dish);
			console.log(`${chef} готовит "${dish}"`);

			if (!chefDishes.has(chef)) {
				chefDishes.set(chef, []);
			}
			chefDishes.get(chef).push(dish);
		});

		console.log("\n");
	}
	console.log("Обобщённая информация по поварам:");
	for (const [chef, dishList] of chefDishes) {
		console.log(`${chef} готовит: ${dishList.join(", ")}`);
	}
}
printOrderInfo(orders);

